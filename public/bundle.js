(()=>{"use strict";var t={98:(t,e,s)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.Canvas2D=void 0;const i=s(210),o=s(350),_=document.getElementById("screen"),n=document.getElementById("gameArea");e.Canvas2D=new class{get scaleX(){return this._scale.x}get scaleY(){return this._scale.y}get offsetX(){return this._offset.x}get offsetY(){return this._offset.y}constructor(t,e){this._canvasContainer=e,this._canvas=t,this._context=this._canvas.getContext("2d"),this.resizeCanvas()}resizeCanvas(){const t=i.GAME_CONFIG.GAME_WIDTH,e=i.GAME_CONFIG.GAME_HEIGHT,s=t/e;let _=window.innerHeight,n=window.innerWidth;n/_>s?n=_*s:_=n/s,this._canvasContainer.style.width=n+"px",this._canvasContainer.style.height=_+"px",this._canvasContainer.style.marginTop=(window.innerHeight-_)/2+"px",this._canvasContainer.style.marginLeft=(window.innerWidth-n)/2+"px",this._canvasContainer.style.marginBottom=(window.innerHeight-_)/2+"px",this._canvasContainer.style.marginRight=(window.innerWidth-n)/2+"px",this._scale=new o.Vector2(n/t,_/e),this._canvas.width=n,this._canvas.height=_,this._canvas.offsetParent&&(this._offset=new o.Vector2(this._canvas.offsetLeft,this._canvas.offsetTop))}clear(){this._context.clearRect(0,0,this._canvas.width,this._canvas.height)}drawImage(t,e=o.Vector2.zero,s=0,i=o.Vector2.zero){this._context.save(),this._context.scale(this._scale.x,this._scale.y),this._context.translate(e.x,e.y),this._context.rotate(s),this._context.drawImage(t,0,0,t.width,t.height,-i.x,-i.y,t.width,t.height),this._context.restore()}drawText(t,e,s,i,o="left"){this._context.save(),this._context.fillStyle=s,this._context.font=e,this._context.textAlign=o,this._context.fillText(t,i.x,i.y),this._context.restore()}}(_,n),window.addEventListener("resize",e.Canvas2D.resizeCanvas.bind(e.Canvas2D))},210:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.GAME_CONFIG=void 0,e.GAME_CONFIG={GAME_WIDTH:1500,GAME_HEIGHT:825,RED_BALLS_POSITIONS:[{x:1056,y:433},{x:1090,y:374},{x:1126,y:393},{x:1126,y:472},{x:1162,y:335},{x:1162,y:374},{x:1162,y:452}],YELLOW_BALLS_POSITIONS:[{x:1022,y:413},{x:1056,y:393},{x:1090,y:452},{x:1126,y:354},{x:1126,y:433},{x:1162,y:413},{x:1162,y:491}],CUE_BALL_POSITION:{x:413,y:413},EIGHT_BALL_POSITION:{x:1090,y:413},SPRITES_BASE_PATH:"assets/sprites/",SPRITES:{MAIN_MENU_BACKGROUND:"main_menu_background.png",TABLE:"spr_background4.png",CUE_BALL:"spr_ball2.png",RED_BALL:"spr_redBall2.png",YELLOW_BALL:"spr_yellowBall2.png",BLACK_BALL:"spr_blackBall2.png",STICK:"spr_stick.png",TWO_PLAYERS_BUTTON:"2_players_button.png",TWO_PLAYERS_BUTTON_HOVERED:"2_players_button_hover.png",ONE_PLAYER_BUTTON:"1_player_button.png",ONE_PLAYER_BUTTON_HOVERED:"1_player_button_hover.png",MUTE_BUTTON:"mute_button.png",MUTE_BUTTON_HOVERED:"mute_button_hover.png",MUTE_BUTTON_PRESSED:"mute_button_pressed.png",MUTE_BUTTON_PRESSED_HOVERED:"mute_button_pressed_hover.png",EASY_BUTTON:"easy_button.png",EASY_BUTTON_HOVERED:"easy_button_hover.png",MEDIUM_BUTTON:"medium_button.png",MEDIUM_BUTTON_HOVERED:"medium_button_hover.png",HARD_BUTTON:"hard_button.png",HARD_BUTTON_HOVERED:"hard_button_hover.png",BACK_BUTTON:"back_button.png",BACK_BUTTON_HOVERED:"back_button_hover.png",CONTINUE_BUTTON:"continue_button.png",CONTINUE_BUTTON_HOVERED:"continue_button_hover.png",INSANE_BUTTON:"insane_button.png",INSANE_BUTTON_HOVERED:"insane_button_hover.png",ABOUT_BUTTON:"about_button.png",ABOUT_BUTTON_HOVERED:"about_button_hover.png",CONTROLS:"controls.png"},AUDIO_BASE_PATH:"assets/sounds/",FRICTION:.0208,COLLISION_LOSS:.0208,CUSHION_WIDTH:57,POCKET_RADIUS:48,POCKETS_POSITIONS:[{x:62,y:62},{x:750,y:32},{x:1435,y:62},{x:62,y:762},{x:750,y:794},{x:1435,y:762}],BALL_DIAMETER:38,BALL_ORIGIN:{x:25,y:25},BALL_MIN_VELOCITY_LENGTH:.05,STICK_ORIGIN:{x:970,y:11},STICK_SHOT_ORIGIN:{x:950,y:11},POWER_TO_ADD_PER_FRAME:1,STICK_MOVEMENT_PER_FRAME:2,STICK_MAX_POWER:70,SHOOT_MOUSE_BUTTON:0,INCREASE_SHOT_POWER_KEY:87,DECREASE_SHOT_POWER_KEY:83,TIMEOUT_TO_HIDE_STICK_AFTER_SHOT:500,TIMOUT_TO_HIDE_BALL_AFTER_POCKET:100}},350:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.Vector2=void 0;class s{constructor(t,e){this._x=t,this._y=e}get x(){return this._x}get y(){return this._y}static get zero(){return new s(0,0)}get length(){return Math.sqrt(Math.pow(this._x,2)+Math.pow(this._y,2))}static copy(t){return new s(t.x,t.y)}addX(t){return new s(this._x,this._y).addToX(t)}addY(t){return new s(this._x,this._y).addToY(t)}addToX(t){return this._x+=t,this}addToY(t){return this._y+=t,this}addTo(t){return this.addToX(t.x).addToY(t.y)}add(t){return new s(this._x,this._y).addTo(t)}subtractTo(t){return this._x-=t.x,this._y-=t.y,this}subtract(t){return new s(this._x,this._y).subtractTo(t)}mult(t){return new s(this._x,this._y).multBy(t)}multBy(t){return this._x*=t,this._y*=t,this}dot(t){return this._x*t.x+this._y*t.y}distFrom(t){return this.subtract(t).length}}e.Vector2=s},356:(t,e,s)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.Mouse=void 0;const i=s(482),o=s(98),_=s(350);e.Mouse=new class{get posX(){return this._position.x}get posY(){return this._position.y}constructor(){this._buttonStates=[];for(let t=0;t<3;t++)this._buttonStates[t]=new i.ButtonState;this._position=_.Vector2.zero,document.addEventListener("mousemove",(t=>this.handleMouseMove(t))),document.addEventListener("mousedown",(t=>this.handleMouseDown(t))),document.addEventListener("mouseup",(t=>this.handleMouseUp(t)))}handleMouseMove(t){const e=(t.pageX-o.Canvas2D.offsetX)/o.Canvas2D.scaleX,s=(t.pageY-o.Canvas2D.offsetY)/o.Canvas2D.scaleY;this._position=new _.Vector2(e,s)}handleMouseDown(t){this._buttonStates[t.button].down=!0,this._buttonStates[t.button].pressed=!0}handleMouseUp(t){this._buttonStates[t.button].down=!1}reset(){for(let t=0;t<3;t++)this._buttonStates[t].pressed=!1}isDown(t){return this._buttonStates[t].down}isPressed(t){return this._buttonStates[t].pressed}}},482:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.ButtonState=void 0,e.ButtonState=class{constructor(){this.down=!1,this.pressed=!1}}},551:(t,e,s)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.Assets=void 0;const i=s(210);e.Assets=new class{constructor(){this.sprites=new Map}async loadGameAssets(){await this.loadGameSprites()}getSprite(t){return this.sprites.get(t)}loadSprite(t){const e=new Image;return this.sprites.set(t,e),new Promise((s=>{e.onload=()=>s(),e.src=i.GAME_CONFIG.SPRITES_BASE_PATH+t}))}async loadGameSprites(){const t=Object.values(i.GAME_CONFIG.SPRITES).map(this.loadSprite.bind(this));await Promise.all(t)}}},553:(t,e,s)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.Ball=void 0;const i=s(210),o=s(98),_=s(659),n=s(350),r=s(551);e.Ball=class{get nextPosition(){return this._position.add(this._velocity.mult(1-i.GAME_CONFIG.FRICTION))}get velocity(){return this._velocity}set velocity(t){this._velocity=t}get position(){return n.Vector2.copy(this._position)}get insidePocket(){return!this._visible&&!this.moving}set position(t){this._position=t}get moving(){return this._moving}get color(){return this._color}constructor(t,e){this._position=t,this._velocity=n.Vector2.zero,this._moving=!1,this._visible=!0,this._color=e,this.resolveSprite(e)}resolveSprite(t){switch(t){case _.Color.white:this._sprite=r.Assets.getSprite(i.GAME_CONFIG.SPRITES.CUE_BALL);break;case _.Color.black:this._sprite=r.Assets.getSprite(i.GAME_CONFIG.SPRITES.BLACK_BALL);break;case _.Color.red:this._sprite=r.Assets.getSprite(i.GAME_CONFIG.SPRITES.RED_BALL);break;case _.Color.yellow:this._sprite=r.Assets.getSprite(i.GAME_CONFIG.SPRITES.YELLOW_BALL)}}handleBallInPocket(){i.GAME_CONFIG.POCKETS_POSITIONS.some((t=>this._position.distFrom(t)<=i.GAME_CONFIG.POCKET_RADIUS))&&(this._velocity=n.Vector2.zero,this._moving=!1,this._visible=!1)}handleCollisionWithCushion(){const t=i.GAME_CONFIG.BALL_DIAMETER/2,e=this.nextPosition.y-t,s=this.nextPosition.x-t,o=this.nextPosition.x+t,_=this.nextPosition.y+t;let r=!1;e<=i.GAME_CONFIG.CUSHION_WIDTH&&(this._position.addToY(i.GAME_CONFIG.CUSHION_WIDTH-this._position.y+t),this.velocity=new n.Vector2(this.velocity.x,-this.velocity.y),r=!0),s<=i.GAME_CONFIG.CUSHION_WIDTH&&(this._position.addToX(i.GAME_CONFIG.CUSHION_WIDTH-this._position.x+t),this.velocity=new n.Vector2(-this.velocity.x,this.velocity.y),r=!0),o>=i.GAME_CONFIG.GAME_WIDTH-i.GAME_CONFIG.CUSHION_WIDTH&&(this._position.addToX(i.GAME_CONFIG.GAME_WIDTH-i.GAME_CONFIG.CUSHION_WIDTH-this._position.x-t),this.velocity=new n.Vector2(-this.velocity.x,this.velocity.y),r=!0),_>=i.GAME_CONFIG.GAME_HEIGHT-i.GAME_CONFIG.CUSHION_WIDTH&&(this._position.addToY(i.GAME_CONFIG.GAME_HEIGHT-i.GAME_CONFIG.CUSHION_WIDTH-this._position.y-t),this.velocity=new n.Vector2(this.velocity.x,-this.velocity.y),r=!0),r&&this._velocity.multBy(1-i.GAME_CONFIG.COLLISION_LOSS)}collideWithBall(t){if(!this._visible||!t._visible)return!1;const e=this._position.subtract(t._position),s=e.length;if(s>i.GAME_CONFIG.BALL_DIAMETER)return!1;const o=e.mult((i.GAME_CONFIG.BALL_DIAMETER-s)/s);this._position.addTo(o.mult(.5)),t.position=t.position.subtract(o.mult(.5));const _=e.mult(1/e.length),r=new n.Vector2(-_.y,_.x),a=_.dot(this._velocity),l=r.dot(this._velocity),h=_.dot(t.velocity),c=r.dot(t.velocity),d=_.mult(h),u=r.mult(l),E=_.mult(a),O=r.mult(c);return this._velocity=d.add(u),t.velocity=E.add(O),this._moving=!0,t._moving=!0,this.velocity.multBy(1-i.GAME_CONFIG.COLLISION_LOSS),t.velocity=t.velocity.mult(1-i.GAME_CONFIG.COLLISION_LOSS),!0}shoot(t,e){this._velocity=new n.Vector2(t*Math.cos(e),t*Math.sin(e)),this._moving=!0}relocate(t){this._position=t,this._velocity=n.Vector2.zero,this._visible=!0}update(){this._moving&&(this.handleBallInPocket(),this.handleCollisionWithCushion(),this._velocity.multBy(1-i.GAME_CONFIG.FRICTION),this._position.addTo(this._velocity),this._velocity.length<i.GAME_CONFIG.BALL_MIN_VELOCITY_LENGTH&&(this.velocity=n.Vector2.zero,this._moving=!1))}draw(){this._visible&&o.Canvas2D.drawImage(this._sprite,this._position,0,i.GAME_CONFIG.BALL_ORIGIN)}}},562:(t,e,s)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.Keyboard=void 0;const i=s(482);e.Keyboard=new class{constructor(){this._keyStates=[];for(let t=0;t<256;t++)this._keyStates[t]=new i.ButtonState;document.addEventListener("keyup",(t=>this.handleKeyUp(t))),document.addEventListener("keydown",(t=>this.handleKeyDown(t)))}handleKeyUp(t){this._keyStates[t.keyCode].down=!1}handleKeyDown(t){this._keyStates[t.keyCode].pressed=!1,this._keyStates[t.keyCode].down=!0}reset(){for(let t=0;t<256;t++)this._keyStates[t].pressed=!1}isDown(t){return this._keyStates[t].down}isPressed(t){return this._keyStates[t].pressed}}},565:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.Player=void 0,e.Player=class{}},659:(t,e)=>{var s;Object.defineProperty(e,"__esModule",{value:!0}),e.Color=void 0,(s=e.Color||(e.Color={}))[s.white=0]="white",s[s.black=1]="black",s[s.red=2]="red",s[s.yellow=3]="yellow"},666:(t,e,s)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.Stick=void 0;const i=s(562),o=s(356),_=s(210),n=s(551),r=s(98),a=s(350);e.Stick=class{get rotation(){return this._rotation}get power(){return this._power}set movable(t){this._movable=t}get visible(){return this._visible}constructor(t){this._position=t,this._power=0,this._movable=!0,this._visible=!0,this._sprite=n.Assets.getSprite(_.GAME_CONFIG.SPRITES.STICK),this._origin=a.Vector2.copy(_.GAME_CONFIG.STICK_ORIGIN)}increasePower(){this._power+=_.GAME_CONFIG.POWER_TO_ADD_PER_FRAME,this._origin.addToX(_.GAME_CONFIG.STICK_MOVEMENT_PER_FRAME)}decreasePower(){this._power-=_.GAME_CONFIG.POWER_TO_ADD_PER_FRAME,this._origin.addToX(-_.GAME_CONFIG.STICK_MOVEMENT_PER_FRAME)}isLessThanMaxPower(){return this._power<=_.GAME_CONFIG.STICK_MAX_POWER}isMoreThanMinPower(){return this._power>=0}updatePower(){i.Keyboard.isDown(_.GAME_CONFIG.INCREASE_SHOT_POWER_KEY)&&this.isLessThanMaxPower()?this.increasePower():i.Keyboard.isDown(_.GAME_CONFIG.DECREASE_SHOT_POWER_KEY)&&this.isMoreThanMinPower()&&this.decreasePower()}updateRotation(){const t=o.Mouse.posY-this._position.y,e=o.Mouse.posX-this._position.x;this._rotation=Math.atan2(t,e)}hide(){this._power=0,this._visible=!1}shoot(){this._origin=a.Vector2.copy(_.GAME_CONFIG.STICK_SHOT_ORIGIN)}relocate(t){this._position=t,this._origin=a.Vector2.copy(_.GAME_CONFIG.STICK_ORIGIN),this._movable=!0,this._visible=!0}update(){this._movable&&(this.updateRotation(),this.updatePower())}draw(){this._visible&&r.Canvas2D.drawImage(this._sprite,this._position,this._rotation,this._origin)}}},699:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.State=void 0,e.State=class{constructor(){this.pocketedBalls=[],this.isValid=!1}}},848:(t,e,s)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.GameWorld=void 0;const i=s(859),o=s(565),_=s(666),n=s(659),r=s(350),a=s(210),l=s(551),h=s(98),c=s(553),d=s(356),u=s(699);e.GameWorld=class{get currentPlayer(){return this._players[this._currentPlayerIndex]}get nextPlayer(){return this._players[(this._currentPlayerIndex+1)%this._players.length]}constructor(){this._currentPlayerIndex=0;const t=a.GAME_CONFIG.RED_BALLS_POSITIONS.map((t=>new c.Ball(r.Vector2.copy(t),n.Color.yellow))),e=a.GAME_CONFIG.YELLOW_BALLS_POSITIONS.map((t=>new c.Ball(r.Vector2.copy(t),n.Color.red))),s=new c.Ball(r.Vector2.copy(a.GAME_CONFIG.EIGHT_BALL_POSITION),n.Color.black);this._cueBall=new c.Ball(r.Vector2.copy(a.GAME_CONFIG.CUE_BALL_POSITION),n.Color.white),this._stick=new _.Stick(r.Vector2.copy(a.GAME_CONFIG.CUE_BALL_POSITION)),this._balls=[this._cueBall,...t,...e,s].sort(((t,e)=>t.position.x-e.position.x)),this._players=[new o.Player,new o.Player],this._turnState=new u.State,this._referee=new i.Referee}shootCueBall(){this._stick.power>0&&(this._stick.shoot(),this._cueBall.shoot(this._stick.power,this._stick.rotation),this._stick.movable=!1,setTimeout((()=>this._stick.hide()),a.GAME_CONFIG.TIMEOUT_TO_HIDE_STICK_AFTER_SHOT))}handleInput(){d.Mouse.isPressed(a.GAME_CONFIG.SHOOT_MOUSE_BUTTON)&&this.shootCueBall()}handleCollisions(){for(let t=0;t<this._balls.length;t++)for(let e=t+1;e<this._balls.length;e++){const s=this._balls[t],i=this._balls[e];if(s.collideWithBall(i)&&!this._turnState.firstCollidedBallColor){const t=s.color===n.Color.white?i.color:s.color;this._turnState.firstCollidedBallColor=t}}}handleBallsInPockets(){this._balls.forEach((t=>{t.insidePocket&&!this._turnState.pocketedBalls.includes(t)&&(this.currentPlayer.color||this.nextPlayer.color===t.color||t.color!==n.Color.red&&t.color!==n.Color.yellow||(this.currentPlayer.color=t.color),this._turnState.pocketedBalls.push(t))}))}ballsMoving(){return this._balls.some((t=>t.moving))}concludeTurn(){this._turnState.isValid=this._referee.isValidTurn(this.currentPlayer,this._turnState),console.log(this._turnState),console.log(this._currentPlayerIndex,this.currentPlayer)}nextTurn(){this._cueBall.insidePocket&&this._cueBall.relocate(r.Vector2.copy(a.GAME_CONFIG.CUE_BALL_POSITION)),this._turnState.pocketedBalls.forEach((t=>{const e=this._balls.indexOf(t);t.color!=n.Color.white&&this._balls.splice(e,1)})),this._stick.relocate(this._cueBall.position),this._turnState=new u.State,this._currentPlayerIndex++,this._currentPlayerIndex=this._currentPlayerIndex%this._players.length}update(){this.handleBallsInPockets(),this.handleCollisions(),this.handleInput(),this._stick.update(),this._balls.forEach((t=>t.update())),this.ballsMoving()||this._stick.visible||(this.concludeTurn(),this.nextTurn())}draw(){h.Canvas2D.drawImage(l.Assets.getSprite(a.GAME_CONFIG.SPRITES.TABLE)),this._balls.forEach((t=>t.draw())),this._stick.draw()}}},859:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.Referee=void 0,e.Referee=class{isValidFirstTouch(t,e){return!(!e||t.color&&t.color!==e)}isValidTurn(t,e){return this.isValidFirstTouch(t,e.firstCollidedBallColor)}}}},e={};function s(i){var o=e[i];if(void 0!==o)return o.exports;var _=e[i]={exports:{}};return t[i](_,_.exports,s),_.exports}(()=>{const t=s(551),e=s(848),i=s(562),o=s(98),_=s(356);let n;function r(){n.update(),i.Keyboard.reset(),_.Mouse.reset(),o.Canvas2D.clear(),n.draw(),requestAnimationFrame(r)}!async function(){await t.Assets.loadGameAssets(),n=new e.GameWorld,r()}()})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,